import rdkit.Chem.PandasTools
import pandas as pd
import rdkit.Chem.PandasTools
from rdkit import Chem
from rdkit.Chem import Draw
from rdkit.Chem.Draw import IPythonConsole
import prolif as plf

database=Chem.SDMolSupplier("file_path_for_database.sdf",removeHs=False)
#convert into PDB individual files
count=0
for mol in database:
    count=count+1
  
    try:

        Chem.MolToPDBFile(mol,(str(count)+".pdb"))
    except:
        print(count)

#convert in rdkit mole database
data=[]
for i in range (1,12136):
    lig = Chem.MolFromPDBFile("".join([str(i),".pdb"]),removeHs=False,sanitize=False)
    print (i)
    data.append(lig)
    
#read protein structure

prot1 = Chem.MolFromPDBFile("Cfile_path_to_protein1.pdb", removeHs=False)
prot2 = Chem.MolFromPDBFile("Cfile_path_to_protein2.pdb", removeHs=False)

Draw.MolsToGridImage(data)

#do interaction calculations
data_mol=[plf.molecule.Molecule(x) for x in data]
prot_mol1=plf.molecule.Molecule(prot1)
prot_mol2=plf.molecule.Molecule(prot2)
fp1 = plf.Fingerprint()
fp1.run_from_iterable(data_mol, prot_mol1)
fp2 = plf.Fingerprint()
fp2.run_from_iterable(data_mol, prot_mol2)

#save interaction finger print as csv files
df1 = fp1.to_dataframe()
df2 = fp2.to_dataframe()
df1.to_csv('interaction_fingerprints_for_protein1.csv')
df2.to_csv('interaction_fingerprints_for_protein2.csv')


search_strings = ['name', 'HB']
df_finger_protein1 = pd.DataFrame(pd.read_csv('interaction_fingerprints_for_protein1.csv'))
#remove the commiting sign(#) to activate string selection of part of finger print interactions
#df_finger_protein1 = [df_finger_protein1.filter(like=search_string) for search_string in search_strings]
#df_finger_protein1=pd.concat(df_finger_protein1, axis=1)
df_finger_protein1

df_finger_protein2 = pd.DataFrame(pd.read_csv('interaction_fingerprints_for_protein2.csv'))
#remove the commiting sign(#) to activate string selection of part of finger print interactions
#df_finger_protein2 = [df_finger_protein2.filter(like=search_string) for search_string in search_strings]
#df_finger_protein2=pd.concat(df_finger_protein2, axis=1)
df_finger_protein2

# provide csv table for equivalent amino acids on both proteins which occupies similar positins within proteins to calculate selectivity 
# as two columns with headers contain protein1 and protein2
# mention the amino acids with number and chain  
# e.g.  Tyr31.C    Phe30.C ==> which means tyrosine 21 on chain C of protein1 is equivalent to Phenylalanine 30 on chain C of protein 2
df_comparable_pfGST_hGSTP1 = pd.DataFrame(pd.read_csv('comparable_aa_protein1_protein2.csv'))
